{
  "openapi": "3.0.0",
  "info": {
    "title": "Zuriportfolio Shop API",
    "description": "Zuriportfolio shop internal / external api.",
    "version": "0.1.9"
  },
  "servers": [
    {
      "url": "https://zuriportfolio-shop-internal-api.onrender.com/api",
      "description": "Production server"
    },
    {
      "url": "http://localhost:8080/api",
      "description": "Zuriportfolio shop internal / external api."
    }
  ],
  "paths": {
    "/products": {
      "get": {
        "tags": ["Product"],
        "summary": "Fetch all products",
        "description": "Retrieve a list of products with pagination",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number (default is 1)",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "Number of items per page (default is 10)",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetProduct"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/products/marketplace": {
      "get": {
        "tags": ["Product"],
        "summary": "Fetch all marketplace products",
        "description": "",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number (default is 1)",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "Number of items per page (default is 10)",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetProduct"
                }
              }
            }
          }
        }
      }
    },
    "/product/add": {
      "post": {
        "tags": ["Product"],
        "summary": "Create a new Product",
        "description": "",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/AddProduct"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddProduct"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/product/category": {
      "post": {
        "tags": ["Product"],
        "summary": "Create a product category",
        "description": "Create a parent or subcategory.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCategory"
              },
              "example": {
                "name": "Software Enginering",
                "parent_id": null
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Category created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryResponse"
                },
                "example": {
                  "parentCategory": {
                    "$ref": "#/components/schemas/ProductCategory"
                  },
                  "subCategory": {
                    "$ref": "#/components/schemas/ProductSubCategory"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Please check the request parameters or status value."
          },
          "401": {
            "description": "Unauthorized. Token is invalid or action is not permitted."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/product/categories": {
      "get": {
        "summary": "Retrieve Product Categories",
        "description": "Get a list of all product categories along with their subcategories.",
        "tags": ["Product"],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "example": [
                  {
                    "id": 11,
                    "name": "Electronics",
                    "product_id": "11",
                    "createdAt": "2023-10-11T21:25:23.0000Z",
                    "sub_categories": [
                      {
                        "id": 101,
                        "name": "Smartphones",
                        "parent_category_id": 1011,
                        "createdAt": "2023-10-11T21:25:23.0000Z"
                      }
                    ]
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/product/{product_id}": {
      "get": {
        "tags": ["Product"],
        "summary": "Fetch product by id",
        "description": "",
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "description": "Product id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetProduct"
                }
              }
            }
          }
        }
      },

      "delete": {
        "tags": ["Product"],
        "summary": "Delete a product",
        "description": "Delete a specific product.",
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "description": "Product id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Action authorized successfully."
          },
          "400": {
            "description": "Bad request. Please check the request parameters."
          },
          "401": {
            "description": "Unauthorized. Token is invalid or action is not permitted."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/product/assets/{product_id}": {
      "patch": {
        "tags": ["Product"],
        "summary": "Update product assets",
        "description": "",
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "description": "Product id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProductAssets"
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "get": {
        "tags": ["Product"],
        "summary": "Get product assets",
        "description": "",
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "description": "Product id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {}
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/product/{product_id}/image": {
      "post": {
        "tags": ["Product"],
        "summary": "Upload a new Product Image",
        "description": "",
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "description": "Product Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "image": {
                    "format": "binary",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Action authorized successfully."
          },
          "400": {
            "description": "Bad request. Please check the request parameters."
          },
          "401": {
            "description": "Unauthorized. Token is invalid or action is not permitted."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "get": {
        "tags": ["Product"],
        "summary": "Get Product Images",
        "description": "",
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "description": "Product Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Action authorized successfully."
          },
          "400": {
            "description": "Bad request. Please check the request parameters."
          },
          "401": {
            "description": "Unauthorized. Token is invalid or action is not permitted."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/product/{product_id}/image/{image_id}": {
      "patch": {
        "tags": ["Product"],
        "summary": "Update a Product image",
        "description": "",
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "description": "Product Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "image_id",
            "in": "path",
            "description": "Image Id",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "image": {
                    "format": "binary",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Action authorized successfully."
          },
          "400": {
            "description": "Bad request. Please check the request parameters."
          },
          "401": {
            "description": "Unauthorized. Token is invalid or action is not permitted."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": ["Product"],
        "summary": "Delete a Product image",
        "description": "",
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "description": "Product Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "image_id",
            "in": "path",
            "description": "Image Id",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Action authorized successfully."
          },
          "400": {
            "description": "Bad request. Please check the request parameters."
          },
          "401": {
            "description": "Unauthorized. Token is invalid or action is not permitted."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/order/status/{order_id}": {
      "patch": {
        "tags": ["Order"],
        "summary": "Update Order Status",
        "description": "Update the status of a specific order.",
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "description": "Order ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": ["pending", "complete", "failed"],
                    "example": "complete"
                  }
                },
                "required": ["status"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Order status updated successfully."
          },
          "400": {
            "description": "Bad request. Please check the request parameters or status value."
          },
          "401": {
            "description": "Unauthorized. Token is invalid or action is not permitted."
          },
          "404": {
            "description": "Order not found."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/orders": {
      "get": {
        "tags": ["Order"],
        "summary": "Gets all order count withing a timeframe",
        "description": "Gets all order count withing a timeframe",
        "parameters": [
          {
            "name": "timeframe",
            "in": "query",
            "description": " values: today, yesterday,one-week-ago and two-weeks-ago ",
            "required": "true",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ordersCount"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/discount": {
      "post": {
        "summary": "Create a discount",
        "tags": ["Discount"],
        "requestBody": {
          "description": "Discount data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "discount_type": {
                    "type": "string",
                    "description": "Type of discount",
                    "required": true
                  },
                  "amount": {
                    "type": "number",
                    "description": "Discount amount",
                    "required": true
                  },
                  "quantity": {
                    "type": "number",
                    "description": "Minimum quantity for the discount",
                    "minimum": 1,
                    "required": true
                  },
                  "maximum_discount_price": {
                    "type": "number",
                    "description": "Maximum discount price",
                    "required": false
                  },
                  "product_ids": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": "Product ID with a custom UUID pattern",
                      "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
                      "example": "valid-uuid",
                      "required": true
                    },
                    "description": "Array of product IDs",
                    "required": true
                  },
                  "valid_from": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Start date and time of discount",
                    "required": true
                  },
                  "valid_to": {
                    "type": "string",
                    "format": "date-time",
                    "description": "End date and time of discount",
                    "required": true
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        },
        "responses": {
          "201": {
            "description": "Discount created successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/discount/{discount_id}": {
      "delete": {
        "summary": "Delete a discount",
        "tags": ["Discount"],
        "parameters": [
          {
            "in": "path",
            "name": "discount_id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the discount"
          }
        ],
        "responses": {
          "201": {
            "description": "Discount created successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/discount/promotions": {
      "get": {
        "summary": "Retrieve Products with Promotions and number of sales",
        "tags": ["Discount"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination (default: 1)",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "Number of items per page (default: 10)",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of products with associated promotions and tracked promotions",
            "content": {
              "application/json": {
                "example": [
                  {
                    "product": {
                      "id": "product1",
                      "name": "Product A"
                    },
                    "promo": {
                      "id": "promo1",
                      "discount_type": "Percentage",
                      "quantity": 5,
                      "amount": 10.0,
                      "valid_from": "2023-10-15T00:00:00Z",
                      "valid_to": "2023-10-30T00:00:00Z"
                    },
                    "sales": 2
                  },
                  {
                    "product": {
                      "id": "product2",
                      "name": "Product B"
                    },
                    "promo": {
                      "id": "promo2",
                      "discount_type": "Fixed",
                      "quantity": 10,
                      "amount": 50.0,
                      "valid_from": "2023-11-01T00:00:00Z",
                      "valid_to": "2023-11-15T00:00:00Z"
                    },
                    " sales": 1
                  }
                ]
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/shop": {
      "post": {
        "summary": "Create a shop",
        "tags": ["Shop"],
        "requestBody": {
          "description": "Shop data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "shop name",
                    "required": true
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        },
        "responses": {
          "201": {
            "description": "Shop created successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/shops": {
      "get": {
        "tags": ["Shops"],
        "summary": "Fetch all shops",
        "description": "",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/shops"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/shops/merchant": {
      "get": {
        "tags": ["Shops"],
        "summary": "Fetch all created shops from merchant.",
        "description": "",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/shop/store-traffic/count/{shop_id}": {
      "get": {
        "tags": ["Shops"],
        "summary": "Fetch shop traffic for a particular shop.",
        "description": "The id of the shop",
        "parameters":[
          {
            "in": "path",
            "name": "shop_id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ]
        ,
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "example": {
                  "status": "success",
                  "message": "Store traffic found",
                  "data": 5
            }
          }
        }
        }
        }
      }
    },
    "/shop/{shop_id}": {
      "get": {
        "tags": ["Shops"],
        "summary": "Fetch a shop and its products by shopId",
        "parameters": [
          {
            "in": "path",
            "name": "shopId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the shop"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of shop and its products",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the shop"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the shop"
                    },
                    "products": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Shop not found"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/shop/store-traffic": {
      "post": {
        "summary": "Used to track user visit to a shop",
        "tags": ["Shop"],
        "requestBody": {
          "description": "Shop data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "shop_id": {
                    "type": "string",
                    "description": "The shop id of the shop visited",
                    "required": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Traffic added"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/sales/reports": {
      "get": {
        "tags": ["Sales"],
        "summary": "Retrieve Sales Reports",
        "description": "Get sales reports based on timeframes.",
        "parameters": [
          {
            "name": "timeframe",
            "in": "query",
            "description": "Comma-separated list of timeframes (e.g., 12m,3m,1yr,7d,24hr)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SalesReport"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/Orders/all": {
      "get": {
        "tags": ["Orders"],
        "summary": "get all orders",
        "description": "To get All orders",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getOrderData"
                },
                "example": {
                  "totalResults": 1,
                  "orders": [
                    {
                      "order_id": "1122",
                      "order_price": 12.22,
                      "createdAt": "2023-10-11T18:00:52.000Z",
                      "merchant": {
                        "revenue": [
                          {
                            "amount": 3000.5
                          }
                        ],
                        "categories": [
                          {
                            "name": "nike"
                          }
                        ],
                        "customer_orders": [
                          {
                            "status": "complete",
                            "sales_report": [
                              {
                                "sales": 11
                              }
                            ]
                          }
                        ],
                        "customer": [
                          {
                            "first_name": "customerFirstName",
                            "last_name": "customerLastName"
                          }
                        ],
                        "product": {
                          "price": 12.34,
                          "name": "shoe",
                          "category_id": 1
                        }
                      }
                    }
                  ],
                  "pagination": {
                    "page": 1,
                    "pageSize": 10,
                    "totalOrders": 1,
                    "totalPages": 1
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Please provide an authenticated user."
          },
          "403": {
            "description": "Forbidden. Token is invalid or action is not permitted for provided user."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      },
      "/auth/send-verification": {
        "post": {
          "tags": ["Authentication"],
          "summary": "Send Verification Code",
          "description": "Sends a verification code to the user's email for account activation.",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "first_name": {
                      "type": "string",
                      "example": "John"
                    },
                    "last_name": {
                      "type": "string",
                      "example": "Doe"
                    },
                    "username": {
                      "type": "string",
                      "example": "johndoe"
                    },
                    "email": {
                      "type": "string",
                      "format": "email",
                      "example": "sicoj92691@elixirsd.com"
                    },
                    "password": {
                      "type": "string",
                      "format": "password",
                      "example": "myPassword2021"
                    },
                    "refresh_token": {
                      "type": "string",
                      "format": "uuid",
                      "example": "42e2a46a-e56f-4e4d-be0e-0675b7026f58"
                    }
                  },
                  "required": ["first_name", "last_name", "username", "email", "password", "refresh_token"]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Verification code sent successfully."
            },
            "400": {
              "description": "Bad request. Please check the request parameters."
            },
            "401": {
              "description": "Unauthorized. Refresh token is invalid or has expired."
            },
            "500": {
              "description": "Internal server error."
            }
          }
        }
      },
      "/auth/confirm-verification": {
        "post": {
          "tags": ["Authentication"],
          "summary": "Confirm Verification Code",
          "description": "Verifies the verification code against the stored code for the user in the database.",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "string",
                      "format": "email",
                      "example": "sicoj92691@elixirsd.com"
                    },
                    "verificationCode": {
                      "type": "string",
                      "example": "3903"
                    }
                  },
                  "required": ["email", "verificationCode"]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Verification code confirmed successfully."
            },
            "400": {
              "description": "Bad request. Please check the request parameters."
            },
            "401": {
              "description": "Unauthorized. Verification code is invalid or has expired."
            },
            "500": {
              "description": "Internal server error."
            }
          }
        }
      },
      "/order/status/{order_id}": {
        "patch": {
          "tags": ["Order"],
          "summary": "Update Order Status",
          "description": "Update the status of a specific order.",
          "parameters": [
            {
              "name": "order_id",
              "in": "path",
              "description": "Order ID",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["pending", "complete", "failed"],
                      "example": "complete"
                    }
                  },
                  "required": ["status"]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Order status updated successfully."
            },
            "400": {
              "description": "Bad request. Please check the request parameters or status value."
            },
            "401": {
              "description": "Unauthorized. Token is invalid or action is not permitted."
            },
            "404": {
              "description": "Order not found."
            },
            "500": {
              "description": "Internal server error."
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        }
      }
    },
    "/orders/average": {
      "get": {
        "tags": ["Orders"],
        "summary": "Fetch the average order value for today || yesterday",
        "parameters": [
          {
            "name": "timeframe",
            "in": "query",
            "description": "Timeframe for calculating the average order value. Should be 'today' || 'yesterday'.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["today", "yesterday", "week", "month"],
              "example": "today"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AverageOrderValue"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Please check the request parameters."
          },
          "401": {
            "description": "Unauthorized. Token is invalid or action is not permitted."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/order/search/{name}": {
      "get": {
        "tags": ["Orders"],
        "summary": "Search Order By Product Name",
        "description": "",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Product name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/searchOrder"
                },
                "example": {
                  "totalResults": 1,
                  "orders": [
                    {
                      "order_id": "1122",
                      "order_price": 12.22,
                      "createdAt": "2023-10-11T18:00:52.000Z",
                      "merchant": {
                        "revenue": [
                          {
                            "amount": 3000.5
                          }
                        ],
                        "customer_orders": [
                          {
                            "status": "complete",
                            "sales_report": [
                              {
                                "sales": 11
                              }
                            ]
                          }
                        ],
                        "customer": [
                          {
                            "first_name": "CustomerFirstName",
                            "last_name": "CustomerLastName"
                          }
                        ],
                        "product": {
                          "price": 12.34,
                          "name": "Longchair",
                          "category_id": 1
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Please provide an authenticated user."
          },
          "403": {
            "description": "Forbidden. Token is invalid or action is not permitted for provided user."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/revenue/{order_id}": {
      "patch": {
        "tags": ["Revenue"],
        "summary": "Update Revenue",
        "description": "Update the revenue based on the order's status",
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string"
            },
            "description": "ID of the order to update revenue for"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "example": {
                  "message": "Revenue updated successfully",
                  "data": {
                    "id": 1,
                    "user_id": "d7955c27-4d61-4cd6-a6bb-e6402151d51f",
                    "amount": 1500.0
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "example": {
                  "error": "--order/not-found",
                  "message": "Order not found"
                }
              }
            }
          }
        }
      }
    },
    "/revenues": {
      "get": {
        "tags": ["Revenue"],
        "summary": "Get Revenue for Today || yesterday",
        "description": "Get revenue data for today || yesterday.",
        "parameters": [
          {
            "name": "timeframe",
            "in": "query",
            "description": "Timeframe for calculating revenue (e.g., today)",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["today", "yesterday", "week"],
              "example": "today"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Revenue fetched successfully"
          },
          "400": {
            "description": "Missing parameter timeframe"
          },
          "401": {
            "description": "Unauthorized. Token is invalid or action is not permitted."
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "AddProduct": {
        "type": "object",
        "properties": {
          "image": {
            "type": "string",
            "format": "binary"
          },
          "shopId": {
            "type": "string"
          },
          "category_id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "quantity": {
            "type": "integer"
          },
          "price": {
            "type": "number"
          },
          "discountPrice": {
            "type": "number"
          },
          "tax": {
            "type": "number"
          },
          "assets_name": {
            "type": "string"
          },
          "assets_link": {
            "type": "string"
          },
          "assets_notes": {
            "type": "string"
          },
          "assets_type": {
            "type": "string"
          }
        },
        "required": [
          "image",
          "shopId",
          "name",
          "description",
          "price",
          "currency",
          "assets_name",
          "assets_link",
          "assets_notes",
          "assets_type",
          "category_id"
        ],
        "example": {
          "sub_category_id": 1,
          "shopId": "30e9ca17-e481-4a20-a1aa-2dccdb6175d5",
          "name": "HNGX polo",
          "description": "Red",
          "quantity": 4,
          "price": 500,
          "discount_price": 455,
          "tax": 2.2,
          "currency": "USD",
          "assets_name": "nft",
          "assets_link": "https://benrobo.co",
          "assets_notes": "some notes",
          "assets_type": "external"
        }
      },
      "UpdateProductData": {
        "type": "object",
        "properties": {
          "newData": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "required": true
              },
              "description": {
                "type": "string",
                "required": true
              },
              "quantity": {
                "type": "integer",
                "required": true
              },
              "category_id": {
                "type": "integer",
                "required": true
              },
              "price": {
                "type": "number",
                "required": true
              },
              "discountPrice": {
                "type": "number",
                "required": true
              },
              "tax": {
                "type": "number",
                "required": true
              },
              "currency": {
                "type": "string",
                "required": true
              },
              "adminStatus": {
                "type": "string",
                "enum": ["pending", "review", "approved", "blacklist"],
                "required": true
              }
            }
          }
        },
        "example": {
          "user_id": "d7955c27-4d61-4cd6-a6bb-e6402151d51f",
          "newData": {
            "name": "Nike Wears",
            "description": "Comfortable and beautifully Designed",
            "quantity": 53,
            "price": 5000,
            "discountPrice": 4500,
            "tax": 200,
            "currency": "Naira",
            "parent_category_id": 1,
            "sub_category_ids": [1],
            "adminStatus": "approved"
          }
        }
      },
      "UpdateProduct": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          },
          "newData": {
            "$ref": "#/components/schemas/UpdateProductData"
          }
        },
        "required": ["userId"],
        "example": {
          "user_id": "d7955c27-4d61-4cd6-a6bb-e6402151d51f",
          "newData": {
            "name": "Nike Wears",
            "description": "Comfortable and beautifully Designed",
            "quantity": 53,
            "price": 5000,
            "discountPrice": 4500,
            "tax": 200,
            "currency": "Naira",
            "categoryId": 1,
            "adminStatus": "approved"
          }
        }
      },
      "UpdateProductAssets": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "required": false
          },
          "link": {
            "type": "string",
            "required": false
          },
          "notes": {
            "type": "string",
            "required": false
          },
          "type": {
            "type": "string",
            "required": false
          }
        },
        "example": {
          "name": "Nike Wears",
          "link": "https://benrobo.co",
          "notes": "some notes",
          "type": "external"
        }
      },
      "UpdateProductWithImage": {
        "type": "object",
        "properties": {
          "image": {
            "type": "array"
          },
          "userId": {
            "type": "string"
          },
          "newData": {
            "$ref": "#/components/schemas/UpdateProductData"
          }
        }
      },
      "GetProduct": {
        "type": "object",
        "properties": {}
      },
      "ordersCount": {
        "type": "number"
      },
      "CreateCategory": {
        "type": "object",
        "properties": {
          "parent_id": {
            "type": ["integer", "null", "undefined", ""]
          },
          "name": {
            "type": "string"
          }
        },
        "required": ["name"]
      },
      "ProductCategory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "user": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ProductSubCategory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "parentCategory": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CategoryResponse": {
        "type": "object",
        "properties": {
          "parentCategory": {
            "$ref": "#/components/schemas/ProductCategory"
          },
          "subCategory": {
            "$ref": "#/components/schemas/ProductSubCategory"
          },
          "name": {
            "$ref": "#/components/schemas/CreateCategory/properties/name"
          }
        }
      },
      "SalesReport": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "sales": {
            "type": "integer"
          },
          "order_id": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": ["id", "user_id", "sales", "order_id", "createdAt"]
      },
      "AddSales Report": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string"
          },
          "order_id": {
            "type": "string"
          },
          "sales": {
            "type": "number"
          }
        },
        "required": ["user_id", "order_id", "sales"],
        "example": {
          "user_id": "fecfd17b-51a3-4288-9bd0-77ac4b7d60a0",
          "order_id": "f47ac10b-58cc-4372-a567-0e02b2c3d479",
          "sales": 500
        }
      },
      "getOrderData": {
        "type": "object",
        "properties": {
          "order_id": {
            "type": "string"
          },
          "order_price": {
            "type": "number",
            "format": "float"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "merchant": {
            "type": "object",
            "properties": {
              "status": {
                "type": "string"
              }
            }
          },
          "customer": {
            "type": "object",
            "properties": {
              "username": {
                "type": "string"
              }
            }
          },
          "product": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              }
            }
          }
        },
        "required": ["order_id", "createdAt", "merchant", "customer", "product"]
      },
      "AverageOrderValue": {
        "type": "object",
        "properties": {
          "averageOrderValue": {
            "type": "number",
            "format": "double",
            "description": "The average order value for today || yesterday."
          }
        },
        "example": {
          "averageOrderValue": 50.45
        }
      },
      "searchOrder": {
        "type": "object",
        "properties": {
          "order_id": {
            "type": "string"
          },
          "order_price": {
            "type": "number",
            "format": "float"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "merchant": {
            "$ref": "#/components/schemas/MerchantData"
          }
        },
        "required": ["order_id", "order_price", "createdAt", "merchant"]
      },
      "MerchantData": {
        "type": "object",
        "properties": {
          "revenue": {
            "$ref": "#/components/schemas/RevenueData",
            "customer_orders": {
              "$ref": "#/components/schemas/CustomerOrders",
              "type": "object",
              "properties": {
                "status": {
                  "type": "string"
                }
              }
            },
            "customer": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string"
                }
              }
            },
            "product": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                }
              }
            }
          }
        },
        "required": ["order_id", "createdAt", "merchant", "customer", "product"]
      },
      "RevenueData": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number"
          }
        }
      },
      "CustomerOrders": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "sales_report": {
            "$ref": "#/components/schemas/SalesData"
          }
        }
      },
      "SalesData": {
        "type": "object",
        "properties": {
          "sales": {
            "type": "number"
          }
        }
      },
      "CustomerData": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          }
        }
      },
      "ProductData": {
        "type": "object",
        "properties": {
          "price": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "categories": {
            "$ref": "#/components/schemas/CategoriesData"
          }
        }
      },
      "CategoriesData": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "Subcategory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "parentCategoryId": {
            "type": "integer"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ProductCategoryWithSubcategory": {
        "type": "object",
        "properties": {
          "subCategory": {
            "$ref": "#/components/schemas/Subcategory"
          },
          "productCategory": {
            "$ref": "#/components/schemas/ProductCategory"
          }
        }
      },
      "ProductWithCategories": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductCategoryWithSubcategory"
            }
          }
        }
      },
      "securitySchemes": {
        "BearerAuth": {
          "type": "http",
          "scheme": "bearer",
          "bearerFormat": "JWT"
        }
      }
    }
  }
}
