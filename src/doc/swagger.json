{
  "openapi": "3.0.0",
  "info": {
    "title": "Zuriportfolio Shop API",
    "description": "Zuriportfolio shop internal / external api.",
    "version": "0.1.9"
  },
  "servers": [
    {
      "url": "https://zuriportfolio-shop-internal-api.onrender.com/api/v1",
      "description": "Production server"
    },
    {
      "url": "https://staging.zuri.team/api/auth/api",
      "description": "Zuriportfolio shop internal / Auth api."
    },
    {
      "url": "http://localhost:8080/api/v1",
      "description": "Local Server."
    }
  ],
  "paths": {
    "/auth/signup": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Sign up a new user",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "firstName": {
                    "type": "string",
                    "example": "John"
                  },
                  "lastName": {
                    "type": "string",
                    "example": "Doe"
                  },

                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "sicoj92691@elixirsd.com"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "example": "myPassword2021"
                  }
                },
                "required": ["firstName", "firstName", "email", "password"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Verification code sent successfully."
          },
          "400": {
            "description": "Bad request. Please check the request parameters."
          },
          "401": {
            "description": "Unauthorized. Refresh token is invalid or has expired."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/auth/send-verification": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Send Verification Code",
        "description": "Sends a verification code to the user's email for account activation.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "first_name": {
                    "type": "string",
                    "example": "John"
                  },
                  "last_name": {
                    "type": "string",
                    "example": "Doe"
                  },
                  "username": {
                    "type": "string",
                    "example": "johndoe"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "sicoj92691@elixirsd.com"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "example": "myPassword2021"
                  },
                  "refresh_token": {
                    "type": "string",
                    "format": "uuid",
                    "example": "42e2a46a-e56f-4e4d-be0e-0675b7026f58"
                  }
                },
                "required": ["first_name", "last_name", "username", "email", "password", "refresh_token"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Verification code sent successfully."
          },
          "400": {
            "description": "Bad request. Please check the request parameters."
          },
          "401": {
            "description": "Unauthorized. Refresh token is invalid or has expired."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/auth/confirm-verification": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Confirm Verification Code",
        "description": "Verifies the verification code against the stored code for the user in the database.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "sicoj92691@elixirsd.com"
                  },
                  "verificationCode": {
                    "type": "string",
                    "example": "3903"
                  }
                },
                "required": ["email", "verificationCode"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Verification code confirmed successfully."
          },
          "400": {
            "description": "Bad request. Please check the request parameters."
          },
          "401": {
            "description": "Unauthorized. Verification code is invalid or has expired."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/products": {
      "get": {
        "tags": ["Product"],
        "summary": "Fetch all products",
        "description": "Fetches a paginated list of products. Allows specifying the page number and items per page for easy navigation.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number (default is 1)",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "Number of items per page (default is 10)",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetProduct"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/products/nopromo": {
      "get": {
        "tags": ["Product"],
        "summary": "Fetch all products without promo",
        "description": "Retrieve a list of products without promotion",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetProduct"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/products/marketplace": {
      "get": {
        "tags": ["Product"],
        "summary": "Fetch all marketplace products",
        "description": "Fetches a paginated list of products available in the marketplace. Allows specifying the page number and items per page for easy navigation.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number (default is 1)",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "Number of items per page (default is 10)",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetProduct"
                }
              }
            }
          }
        }
      }
    },
    "/product/add": {
      "post": {
        "tags": ["Product"],
        "summary": "Create a new Product",
        "description": "Create a new product to the system. Requires authentication with a valid access token. Accepts product data in multipart/form-data format.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/AddProduct"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddProduct"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/product/category": {
      "post": {
        "tags": ["Product"],
        "summary": "Create a product category",
        "description": "Creates a new product category, which can be either a parent or subcategory. Provide the name of the category and an optional parent category ID.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCategory"
              },
              "example": {
                "name": "Software Enginering",
                "parent_id": null
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Category created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryResponse"
                },
                "example": {
                  "parentCategory": {
                    "$ref": "#/components/schemas/ProductCategory"
                  },
                  "subCategory": {
                    "$ref": "#/components/schemas/ProductSubCategory"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Please check the request parameters or status value."
          },
          "401": {
            "description": "Unauthorized. Token is invalid or action is not permitted."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/products/categories": {
      "get": {
        "summary": "Retrieve Product Categories",
        "description": "Retrieves a list of all product categories along with their respective subcategories. Each category object includes an ID, name, associated product ID, creation timestamp, and an array of its subcategories with their respective IDs, names, parent category IDs, and creation timestamps.",
        "tags": ["Product"],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "example": [
                  {
                    "id": 11,
                    "name": "Electronics",
                    "product_id": "11",
                    "createdAt": "2023-10-11T21:25:23.0000Z",
                    "sub_categories": [
                      {
                        "id": 101,
                        "name": "Smartphones",
                        "parent_category_id": 1011,
                        "createdAt": "2023-10-11T21:25:23.0000Z"
                      }
                    ]
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/product/{product_id}": {
      "get": {
        "tags": ["Product"],
        "summary": "Fetch product by id",
        "description": "Fetches a specific product from the database based on its unique ID.",
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "description": "Product id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetProduct"
                }
              }
            }
          }
        }
      },

      "delete": {
        "tags": ["Product"],
        "summary": "Delete a product",
        "description": "Delete a specific product.",
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "description": "Product id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Action authorized successfully."
          },
          "400": {
            "description": "Bad request. Please check the request parameters."
          },
          "401": {
            "description": "Unauthorized. Token is invalid or action is not permitted."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/product/assets/{product_id}": {
      "patch": {
        "tags": ["Product"],
        "summary": "Update product assets",
        "description": "Updates the assets associated with a specific product.",
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "description": "Product id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProductAssets"
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "get": {
        "tags": ["Product"],
        "summary": "Get product assets",
        "description": "",
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "description": "Product id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {}
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/product/{product_id}/image": {
      "post": {
        "tags": ["Product"],
        "summary": "Upload a new Product Image",
        "description": "Uploads a new image for the specified product.",
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "description": "Product Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "image": {
                    "format": "binary",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Action authorized successfully."
          },
          "400": {
            "description": "Bad request. Please check the request parameters."
          },
          "401": {
            "description": "Unauthorized. Token is invalid or action is not permitted."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "get": {
        "tags": ["Product"],
        "summary": "Get Product Images",
        "description": "",
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "description": "Product Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Action authorized successfully."
          },
          "400": {
            "description": "Bad request. Please check the request parameters."
          },
          "401": {
            "description": "Unauthorized. Token is invalid or action is not permitted."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/product/{product_id}/image/{image_id}": {
      "patch": {
        "tags": ["Product"],
        "summary": "Update a Product image",
        "description": "Updates the specified image associated with the product.",
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "description": "Product Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "image_id",
            "in": "path",
            "description": "Image Id",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "image": {
                    "format": "binary",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Action authorized successfully."
          },
          "400": {
            "description": "Bad request. Please check the request parameters."
          },
          "401": {
            "description": "Unauthorized. Token is invalid or action is not permitted."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": ["Product"],
        "summary": "Delete a Product image",
        "description": "",
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "description": "Product Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "image_id",
            "in": "path",
            "description": "Image Id",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Action authorized successfully."
          },
          "400": {
            "description": "Bad request. Please check the request parameters."
          },
          "401": {
            "description": "Unauthorized. Token is invalid or action is not permitted."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/products/{productId}/unpublish": {
      "patch": {
        "summary": "Unpublish a product",
        "tags": ["Product"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "description": "The ID of the product",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "isPublished": {
                    "type": "boolean",
                    "example": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Product unpublished successfully",
            "content": {
              "application/json": {
                "example": [
                  {
                    "id": "product-uuid",
                    "userId": "merchant-uuid",
                    "shopId": "merchant-shop-uuid",
                    "name": "merchant shop",
                    "description": "This is a merchant's product",
                    "quantity": 123,
                    "price": 12.34,
                    "discountPrice": 1.23,
                    "tax": 1.2,
                    "adminStatus": "pending",
                    "ratingId": 5,
                    "isPublished": false,
                    "currency": "NGN",
                    "createdAt": "2023-10-11T00:00:00.000Z",
                    "updatedAt": "2023-10-11T00:00:00.000Z"
                  }
                ]
              }
            }
          },
          "400": {
            "description": "Invalid Product ID"
          },
          "404": {
            "description": "Product not found"
          }
        }
      }
    },
    "/discount": {
      "post": {
        "summary": "Create a discount",
        "description": "Create a discount for specified products within a given time frame.",
        "tags": ["Discount"],
        "requestBody": {
          "description": "Discount data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "discount_type": {
                    "type": "string",
                    "description": "Type of discount",
                    "required": true
                  },
                  "amount": {
                    "type": "number",
                    "description": "Discount amount",
                    "required": true
                  },
                  "quantity": {
                    "type": "number",
                    "description": "Minimum quantity for the discount",
                    "minimum": 1,
                    "required": true
                  },
                  "maximum_discount_price": {
                    "type": "number",
                    "description": "Maximum discount price",
                    "required": false
                  },
                  "product_ids": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": "Product ID with a custom UUID pattern",
                      "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
                      "example": "valid-uuid",
                      "required": true
                    },
                    "description": "Array of product IDs",
                    "required": true
                  },
                  "valid_from": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Start date and time of discount",
                    "required": true
                  },
                  "valid_to": {
                    "type": "string",
                    "format": "date-time",
                    "description": "End date and time of discount",
                    "required": true
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        },
        "responses": {
          "201": {
            "description": "Discount created successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/discount/{discount_id}": {
      "delete": {
        "summary": "Delete a discount",
        "description": "Delete a specific discount by providing its unique ID.",
        "tags": ["Discount"],
        "parameters": [
          {
            "in": "path",
            "name": "discount_id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the discount"
          }
        ],
        "responses": {
          "201": {
            "description": "Discount created successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/discount/promotions": {
      "get": {
        "summary": "Retrieve Products with Promotions and number of sales",
        "description": "Retrieve a list of products with associated promotions and the number of sales for each product. Supports pagination.",
        "tags": ["Discount"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination (default: 1)",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "Number of items per page (default: 10)",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of products with associated promotions and tracked promotions",
            "content": {
              "application/json": {
                "example": [
                  {
                    "product": {
                      "id": "product1",
                      "name": "Product A"
                    },
                    "promo": {
                      "id": "promo1",
                      "discount_type": "Percentage",
                      "quantity": 5,
                      "amount": 10.0,
                      "valid_from": "2023-10-15T00:00:00Z",
                      "valid_to": "2023-10-30T00:00:00Z"
                    },
                    "sales": 2
                  },
                  {
                    "product": {
                      "id": "product2",
                      "name": "Product B"
                    },
                    "promo": {
                      "id": "promo2",
                      "discount_type": "Fixed",
                      "quantity": 10,
                      "amount": 50.0,
                      "valid_from": "2023-11-01T00:00:00Z",
                      "valid_to": "2023-11-15T00:00:00Z"
                    },
                    " sales": 1
                  }
                ]
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/discounts/{discountId}": {
      "patch": {
        "summary": "Update a Discount",
        "description": "Update an existing discount with the specified ID.",
        "tags": ["Discount"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "discount_id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the discount"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/UpdateDiscount"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Discount updated successfully",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "Invalid discount ID/fields"
          },
          "404": {
            "description": "Discount not found"
          }
        }
      }
    },
    "/discount/track": {
      "post": {
        "summary": "Track a Discount",
        "description": "Track a product that contains a discount.",
        "tags": ["Discount"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "promo_id": {
                    "type": "number",
                    "required": true,
                    "example": 3
                  },
                  "productId": {
                    "type": "string",
                    "required": true,
                    "example": "42e2a46a-e56f-4e4d-be0e-0675b7026f58"
                  },
                  "merchant_id": {
                    "type": "string",
                    "required": true,
                    "example": "42e2a46a-e56f-4e4d-be0e-0675b7026f58"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Discount updated successfully",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "Invalid discount ID/fields"
          },
          "404": {
            "description": "Discount not found"
          }
        }
      }
    },
    "/shop": {
      "post": {
        "summary": "Create a shop",
        "description": "Create a new shop with the provided details.",
        "tags": ["Shop"],
        "requestBody": {
          "description": "Shop data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "shop name",
                    "required": true
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        },
        "responses": {
          "201": {
            "description": "Shop created successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/shops": {
      "get": {
        "tags": ["Shops"],
        "summary": "Fetch all shops",
        "description": "Retrieve a list of all shops from the database.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/shops"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/shops/merchant": {
      "get": {
        "tags": ["Shops"],
        "summary": "Fetch all created shops from merchant.",
        "description": "Retrieve a list of all shops created by the authenticated merchant.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/shop/store-traffic/count/12months/{shop_id}": {
      "get": {
        "tags": ["Shops"],
        "summary": "Fetch shop traffic for a particular shop  within a year.",
        "description": "The id of the shop",
        "parameters": [
          {
            "in": "path",
            "name": "shop_id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "example": {
                  "status": "success",
                  "message": "Store traffic found",
                  "data": [
                    {
                      "timeframe": "Nov",
                      "year": "2022",
                      "traffic": 0
                    },
                    {
                      "timeframe": "Dec",
                      "year": "2022",
                      "traffic": 0
                    },
                    {
                      "timeframe": "Jan",
                      "year": "2023",
                      "traffic": 0
                    },
                    {
                      "timeframe": "Feb",
                      "year": "2023",
                      "traffic": 0
                    },
                    {
                      "timeframe": "Mar",
                      "year": "2023",
                      "traffic": 0
                    },
                    {
                      "timeframe": "Apr",
                      "year": "2023",
                      "traffic": 0
                    },
                    {
                      "timeframe": "May",
                      "year": "2023",
                      "traffic": 0
                    },
                    {
                      "timeframe": "Jun",
                      "year": "2023",
                      "traffic": 0
                    },
                    {
                      "timeframe": "Jul",
                      "year": "2023",
                      "traffic": 0
                    },
                    {
                      "timeframe": "Aug",
                      "year": "2023",
                      "traffic": 0
                    },
                    {
                      "timeframe": "Sep",
                      "year": "2023",
                      "traffic": 0
                    },
                    {
                      "timeframe": "Oct",
                      "year": "2023",
                      "traffic": 12
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/shop/store-traffic/count/30days/{shop_id}": {
      "get": {
        "tags": ["Shops"],
        "summary": "Fetch shop traffic for a particular shop  within a 30days.",
        "description": "The id of the shop",
        "parameters": [
          {
            "in": "path",
            "name": "shop_id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "example": {
                  "status": "success",
                  "message": "Store traffic found",
                  "data": [
                    {
                      "timeframe": "21st",
                      "date": "Thu Sep 21 2023",
                      "traffic": 0
                    },
                    {
                      "timeframe": "22nd",
                      "date": "Fri Sep 22 2023",
                      "traffic": 0
                    },
                    {
                      "timeframe": "23rd",
                      "date": "Sat Sep 23 2023",
                      "traffic": 0
                    },
                    {
                      "timeframe": "24th",
                      "date": "Sun Sep 24 2023",
                      "traffic": 0
                    },
                    {
                      "timeframe": "25th",
                      "date": "Mon Sep 25 2023",
                      "traffic": 0
                    },
                    {
                      "timeframe": "26th",
                      "date": "Tue Sep 26 2023",
                      "traffic": 0
                    },
                    {
                      "timeframe": "27th",
                      "date": "Wed Sep 27 2023",
                      "traffic": 0
                    },
                    {
                      "timeframe": "28th",
                      "date": "Thu Sep 28 2023",
                      "traffic": 0
                    },
                    {
                      "timeframe": "29th",
                      "date": "Fri Sep 29 2023",
                      "traffic": 0
                    },
                    {
                      "timeframe": "30th",
                      "date": "Sat Sep 30 2023",
                      "traffic": 0
                    },
                    {
                      "timeframe": "1st",
                      "date": "Sun Oct 01 2023",
                      "traffic": 0
                    },
                    {
                      "timeframe": "2nd",
                      "date": "Mon Oct 02 2023",
                      "traffic": 0
                    },
                    {
                      "timeframe": "3rd",
                      "date": "Tue Oct 03 2023",
                      "traffic": 0
                    },
                    {
                      "timeframe": "4th",
                      "date": "Wed Oct 04 2023",
                      "traffic": 0
                    },
                    {
                      "timeframe": "5th",
                      "date": "Thu Oct 05 2023",
                      "traffic": 0
                    },
                    {
                      "timeframe": "6th",
                      "date": "Fri Oct 06 2023",
                      "traffic": 0
                    },
                    {
                      "timeframe": "7th",
                      "date": "Sat Oct 07 2023",
                      "traffic": 0
                    },
                    {
                      "timeframe": "8th",
                      "date": "Sun Oct 08 2023",
                      "traffic": 0
                    },
                    {
                      "timeframe": "9th",
                      "date": "Mon Oct 09 2023",
                      "traffic": 0
                    },
                    {
                      "timeframe": "10th",
                      "date": "Tue Oct 10 2023",
                      "traffic": 0
                    },
                    {
                      "timeframe": "11th",
                      "date": "Wed Oct 11 2023",
                      "traffic": 0
                    },
                    {
                      "timeframe": "12th",
                      "date": "Thu Oct 12 2023",
                      "traffic": 0
                    },
                    {
                      "timeframe": "13th",
                      "date": "Fri Oct 13 2023",
                      "traffic": 0
                    },
                    {
                      "timeframe": "14th",
                      "date": "Sat Oct 14 2023",
                      "traffic": 0
                    },
                    {
                      "timeframe": "15th",
                      "date": "Sun Oct 15 2023",
                      "traffic": 0
                    },
                    {
                      "timeframe": "16th",
                      "date": "Mon Oct 16 2023",
                      "traffic": 0
                    },
                    {
                      "timeframe": "17th",
                      "date": "Tue Oct 17 2023",
                      "traffic": 0
                    },
                    {
                      "timeframe": "18th",
                      "date": "Wed Oct 18 2023",
                      "traffic": 0
                    },
                    {
                      "timeframe": "19th",
                      "date": "Thu Oct 19 2023",
                      "traffic": 3
                    },
                    {
                      "timeframe": "20th",
                      "date": "Fri Oct 20 2023",
                      "traffic": 9
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/shop/store-traffic/count/24hrs/{shop_id}": {
      "get": {
        "tags": ["Shops"],
        "summary": "Fetch shop traffic for a particular shop  within 24hrs.",
        "description": "The id of the shop",
        "parameters": [
          {
            "in": "path",
            "name": "shop_id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "example": {
                  "status": "success",
                  "message": "Store traffic found",
                  "data": [
                    {
                      "timeframe": "5pm",
                      "date": "Thu Oct 19 2023",
                      "time": "5:59:20 PM",
                      "traffic": 0
                    },
                    {
                      "timeframe": "6pm",
                      "date": "Thu Oct 19 2023",
                      "time": "6:59:20 PM",
                      "traffic": 1
                    },
                    {
                      "timeframe": "7pm",
                      "date": "Thu Oct 19 2023",
                      "time": "7:59:20 PM",
                      "traffic": 0
                    },
                    {
                      "timeframe": "8pm",
                      "date": "Thu Oct 19 2023",
                      "time": "8:59:20 PM",
                      "traffic": 0
                    },
                    {
                      "timeframe": "9pm",
                      "date": "Thu Oct 19 2023",
                      "time": "9:59:20 PM",
                      "traffic": 0
                    },
                    {
                      "timeframe": "10pm",
                      "date": "Thu Oct 19 2023",
                      "time": "10:59:20 PM",
                      "traffic": 0
                    },
                    {
                      "timeframe": "11pm",
                      "date": "Thu Oct 19 2023",
                      "time": "11:59:20 PM",
                      "traffic": 0
                    },
                    {
                      "timeframe": "12am",
                      "date": "Fri Oct 20 2023",
                      "time": "12:59:20 AM",
                      "traffic": 0
                    },
                    {
                      "timeframe": "1am",
                      "date": "Fri Oct 20 2023",
                      "time": "1:59:20 AM",
                      "traffic": 0
                    },
                    {
                      "timeframe": "2am",
                      "date": "Fri Oct 20 2023",
                      "time": "2:59:20 AM",
                      "traffic": 0
                    },
                    {
                      "timeframe": "3am",
                      "date": "Fri Oct 20 2023",
                      "time": "3:59:20 AM",
                      "traffic": 0
                    },
                    {
                      "timeframe": "4am",
                      "date": "Fri Oct 20 2023",
                      "time": "4:59:20 AM",
                      "traffic": 0
                    },
                    {
                      "timeframe": "5am",
                      "date": "Fri Oct 20 2023",
                      "time": "5:59:20 AM",
                      "traffic": 0
                    },
                    {
                      "timeframe": "6am",
                      "date": "Fri Oct 20 2023",
                      "time": "6:59:20 AM",
                      "traffic": 0
                    },
                    {
                      "timeframe": "7am",
                      "date": "Fri Oct 20 2023",
                      "time": "7:59:20 AM",
                      "traffic": 0
                    },
                    {
                      "timeframe": "8am",
                      "date": "Fri Oct 20 2023",
                      "time": "8:59:20 AM",
                      "traffic": 0
                    },
                    {
                      "timeframe": "9am",
                      "date": "Fri Oct 20 2023",
                      "time": "9:59:20 AM",
                      "traffic": 0
                    },
                    {
                      "timeframe": "10am",
                      "date": "Fri Oct 20 2023",
                      "time": "10:59:20 AM",
                      "traffic": 5
                    },
                    {
                      "timeframe": "11am",
                      "date": "Fri Oct 20 2023",
                      "time": "11:59:20 AM",
                      "traffic": 1
                    },
                    {
                      "timeframe": "12pm",
                      "date": "Fri Oct 20 2023",
                      "time": "12:59:20 PM",
                      "traffic": 0
                    },
                    {
                      "timeframe": "1pm",
                      "date": "Fri Oct 20 2023",
                      "time": "1:59:20 PM",
                      "traffic": 0
                    },
                    {
                      "timeframe": "2pm",
                      "date": "Fri Oct 20 2023",
                      "time": "2:59:20 PM",
                      "traffic": 0
                    },
                    {
                      "timeframe": "3pm",
                      "date": "Fri Oct 20 2023",
                      "time": "3:59:20 PM",
                      "traffic": 3
                    },
                    {
                      "timeframe": "4pm",
                      "date": "Fri Oct 20 2023",
                      "time": "4:59:20 PM",
                      "traffic": 0
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/shop/store-traffic/count/3months/{shop_id}": {
      "get": {
        "tags": ["Shops"],
        "summary": "Fetch shop traffic for a particular shop  within 3 months.",
        "description": "The id of the shop",
        "parameters": [
          {
            "in": "path",
            "name": "shop_id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "example": {
                  "status": "success",
                  "message": "Store traffic found",
                  "data": [
                    {
                      "timeframe": "Aug",
                      "year": "2023",
                      "traffic": 0
                    },
                    {
                      "timeframe": "Sep",
                      "year": "2023",
                      "traffic": 0
                    },
                    {
                      "timeframe": "Oct",
                      "year": "2023",
                      "traffic": 12
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/shop/store-traffic/count/7days/{shop_id}": {
      "get": {
        "tags": ["Shops"],
        "summary": "Fetch shop traffic for a particular shop within 7 days.",
        "description": "The id of the shop",
        "parameters": [
          {
            "in": "path",
            "name": "shop_id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "example": {
                  "status": "success",
                  "message": "Store traffic found",
                  "data": [
                    {
                      "timeframe": "Saturday",
                      "date": "Sat Oct 14 2023",
                      "traffic": 0
                    },
                    {
                      "timeframe": "Sunday",
                      "date": "Sun Oct 15 2023",
                      "traffic": 0
                    },
                    {
                      "timeframe": "Monday",
                      "date": "Mon Oct 16 2023",
                      "traffic": 0
                    },
                    {
                      "timeframe": "Tuesday",
                      "date": "Tue Oct 17 2023",
                      "traffic": 0
                    },
                    {
                      "timeframe": "Wednesday",
                      "date": "Wed Oct 18 2023",
                      "traffic": 0
                    },
                    {
                      "timeframe": "Thursday",
                      "date": "Thu Oct 19 2023",
                      "traffic": 3
                    },
                    {
                      "timeframe": "Friday",
                      "date": "Fri Oct 20 2023",
                      "traffic": 9
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/shop/{shop_id}": {
      "get": {
        "tags": ["Shops"],
        "summary": "Fetch a shop and its products by shopId",
        "description": "Retrieve detailed information about a shop and its associated products using its unique ID.",
        "parameters": [
          {
            "in": "path",
            "name": "shopId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the shop"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "The page number for pagination"
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "integer",
              "default": 12
            },
            "description": "The number of items per page"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of shop and its products",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the shop"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the shop"
                    },
                    "products": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "totalItems": {
                          "type": "integer",
                          "description": "Total number of items"
                        },
                        "totalPages": {
                          "type": "integer",
                          "description": "Total number of pages"
                        },
                        "currentPage": {
                          "type": "integer",
                          "description": "Current page number"
                        },
                        "pageSize": {
                          "type": "integer",
                          "description": "Number of items per page"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Shop not found"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/shop/store-traffic": {
      "post": {
        "summary": "Used to track user visit to a shop",
        "description": "This endpoint is used to track user visits to a shop.",
        "tags": ["Shop"],
        "requestBody": {
          "description": "Shop data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "shop_id": {
                    "type": "string",
                    "description": "The shop id of the shop visited",
                    "required": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Traffic added"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/sales/reports": {
      "get": {
        "tags": ["Sales"],
        "summary": "Retrieve Sales Reports",
        "description": "Get sales reports based on specified timeframes.",
        "parameters": [
          {
            "name": "timeframe",
            "in": "query",
            "description": "list of timeframes (e.g., 12m,3m,1yr,7d,24hr,1d)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SalesReport"
                },
                "example": [
                  {
                    "hour": "1",
                    "sum": "123456"
                  }
                ]
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/activities": {
      "get": {
        "tags": ["Activities"],
        "summary": "Retrieve Activities",
        "description": "Get all activities tied to a merchant.",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "example": {
                  "errorStatus": false,
                  "code": "--activities/success",
                  "message": "activities fetched successfully",
                  "data": [
                    {
                      "id": "57f0925e-86c1-4af9-826a-54f0f43e4f65",
                      "action": "ORDER PLACED",
                      "user_id": "a87be40d-8632-4c45-9b44-c893560d58c9",
                      "title": "order placed by user A",
                      "description": "A user from your store placed an order",
                      "createdAt": "2023-10-22T03:26:01.583Z"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/Orders/all": {
      "get": {
        "tags": ["Orders"],
        "summary": "get all orders",
        "description": "Retrieve All orders",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getOrderData"
                },
                "example": {
                  "orders": [
                    {
                      "id": "order_id",
                      "order_status": "completed",
                      "date": "2023-10-11T18:00:52.000Z",
                      "customerInfo": {
                        "id": "customer-id",
                        "firstName": "customer-firstName",
                        "lastName": "customer-lastName"
                      },
                      "items": [
                        {
                          "price": 1.23,
                          "order_item_status": "pending",
                          "category": {
                            "id": 1,
                            "name": "books",
                            "createdAt": "2023-10-11T00:00:00.000Z",
                            "user_id": "d7955c27-4d61-4cd6-a6bb-e6402151d51f",
                            "sub_categories": [
                              {
                                "id": 1,
                                "name": "sub-book",
                                "parent_category_id": 1,
                                "createdAt": "2023-10-11T00:00:00.000Z"
                              }
                            ]
                          }
                        },
                        {
                          "price": 12.34,
                          "order_item_status": "pending",
                          "category": {
                            "id": 2,
                            "name": "furniture",
                            "createdAt": "2023-10-11T00:00:00.000Z",
                            "user_id": "d7955c27-4d61-4cd6-a6bb-e6402151d51f",
                            "sub_categories": [
                              {
                                "id": 2,
                                "name": "sub-furniture",
                                "parent_category_id": 2,
                                "createdAt": "2023-10-11T00:00:00.000Z"
                              }
                            ]
                          }
                        }
                      ]
                    }
                  ],
                  "pagination": {
                    "page": 1,
                    "pageSize": 10,
                    "totalOrders": 1,
                    "totalPages": 1
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Please provide an authenticated user."
          },
          "403": {
            "description": "Forbidden. Token is invalid or action is not permitted for provided user."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/orders": {
      "get": {
        "tags": ["Order"],
        "summary": "Gets all order count withing a timeframe",
        "description": "Retrieve the total order count within a specific timeframe.",
        "parameters": [
          {
            "name": "timeframe",
            "in": "query",
            "description": " values: today, yesterday,one-week-ago and two-weeks-ago ",
            "required": "true",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ordersCount"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/order/status/{order_id}": {
      "patch": {
        "tags": ["Order"],
        "summary": "Update Order Status",
        "description": "Update the status of a specific order.",
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "description": "Order ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": ["pending", "complete", "failed"],
                    "example": "complete"
                  }
                },
                "required": ["status"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Order status updated successfully."
          },
          "400": {
            "description": "Bad request. Please check the request parameters or status value."
          },
          "401": {
            "description": "Unauthorized. Token is invalid or action is not permitted."
          },
          "404": {
            "description": "Order not found."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/orders/average": {
      "get": {
        "tags": ["Orders"],
        "summary": "Fetch the average order value for today || yesterday",
        "description": "Retrieve the average order value for a specific timeframe, such as today or yesterday.",
        "parameters": [
          {
            "name": "timeframe",
            "in": "query",
            "description": "Timeframe for calculating the average order value. Should be 'today' || 'yesterday'.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["today", "yesterday", "week", "month"],
              "example": "today"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AverageOrderValue"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Please check the request parameters."
          },
          "401": {
            "description": "Unauthorized. Token is invalid or action is not permitted."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/orders/search/{name}": {
      "get": {
        "tags": ["Orders"],
        "summary": "Search Order By Product Name",
        "description": "Search for order by product name",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Product name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/searchOrder"
                },
                "example": {
                  "totalResults": 1,
                  "orders": [
                    {
                      "order_id": "1122",
                      "order_price": 12.22,
                      "createdAt": "2023-10-11T18:00:52.000Z",
                      "merchant": {
                        "revenue": [
                          {
                            "amount": 3000.5
                          }
                        ],
                        "customer_orders": [
                          {
                            "status": "complete",
                            "sales_report": [
                              {
                                "sales": 11
                              }
                            ]
                          }
                        ],
                        "customer": [
                          {
                            "first_name": "CustomerFirstName",
                            "last_name": "CustomerLastName"
                          }
                        ],
                        "product": {
                          "price": 12.34,
                          "name": "Longchair",
                          "category_id": 1
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Please provide an authenticated user."
          },
          "403": {
            "description": "Forbidden. Token is invalid or action is not permitted for provided user."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/revenues": {
      "get": {
        "tags": ["Revenue"],
        "summary": "Get Revenue for Today || yesterday",
        "description": "Get revenue data for today || yesterday.",
        "parameters": [
          {
            "name": "timeframe",
            "in": "query",
            "description": "Timeframe for calculating revenue (e.g., today)",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["today", "yesterday", "all"],
              "example": "today"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Revenue fetched successfully",
            "examples": {
              "data": {
                "timeframe": "today",
                "revenue": 10000.4,
                "currency": "NGN"
              }
            }
          },
          "400": {
            "description": "Missing parameter timeframe"
          },
          "401": {
            "description": "Unauthorized. Token is invalid or action is not permitted."
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "AddProduct": {
        "type": "object",
        "properties": {
          "image": {
            "type": "string",
            "format": "binary"
          },
          "sub_category_id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "price": {
            "type": "number"
          },
          "currency": {
            "type": "string"
          },
          "discountPrice": {
            "type": "number"
          },
          "tax": {
            "type": "number"
          },
          "assets_name": {
            "type": "string"
          },
          "assets_link": {
            "type": "string"
          },
          "assets_notes": {
            "type": "string"
          },
          "assets_type": {
            "type": "string"
          }
        },
        "required": [
          "image",
          "sub_category_id",
          "name",
          "description",
          "price",
          "currency",
          "assets_name",
          "assets_link",
          "assets_notes",
          "assets_type"
        ],
        "example": {
          "sub_category_id": 1,
          "shopId": "30e9ca17-e481-4a20-a1aa-2dccdb6175d5",
          "name": "HNGX polo",
          "description": "Red",
          "quantity": 4,
          "price": 500,
          "discount_price": 455,
          "tax": 2.2,
          "currency": "USD",
          "assets_name": "nft",
          "assets_link": "https://benrobo.co",
          "assets_notes": "some notes",
          "assets_type": "external"
        }
      },
      "UpdateProductData": {
        "type": "object",
        "properties": {
          "newData": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "required": true
              },
              "description": {
                "type": "string",
                "required": true
              },
              "quantity": {
                "type": "integer",
                "required": true
              },
              "category_id": {
                "type": "integer",
                "required": true
              },
              "price": {
                "type": "number",
                "required": true
              },
              "discountPrice": {
                "type": "number",
                "required": true
              },
              "tax": {
                "type": "number",
                "required": true
              },
              "currency": {
                "type": "string",
                "required": true
              },
              "adminStatus": {
                "type": "string",
                "enum": ["pending", "review", "approved", "blacklist"],
                "required": true
              }
            }
          }
        },
        "example": {
          "user_id": "d7955c27-4d61-4cd6-a6bb-e6402151d51f",
          "newData": {
            "name": "Nike Wears",
            "description": "Comfortable and beautifully Designed",
            "quantity": 53,
            "price": 5000,
            "discountPrice": 4500,
            "tax": 200,
            "currency": "Naira",
            "parent_category_id": 1,
            "sub_category_ids": [1],
            "adminStatus": "approved"
          }
        }
      },
      "UpdateProduct": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          },
          "newData": {
            "$ref": "#/components/schemas/UpdateProductData"
          }
        },
        "required": ["userId"],
        "example": {
          "user_id": "d7955c27-4d61-4cd6-a6bb-e6402151d51f",
          "newData": {
            "name": "Nike Wears",
            "description": "Comfortable and beautifully Designed",
            "quantity": 53,
            "price": 5000,
            "discountPrice": 4500,
            "tax": 200,
            "currency": "Naira",
            "categoryId": 1,
            "adminStatus": "approved"
          }
        }
      },
      "UpdateProductAssets": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "required": false
          },
          "link": {
            "type": "string",
            "required": false
          },
          "notes": {
            "type": "string",
            "required": false
          },
          "type": {
            "type": "string",
            "required": false
          }
        },
        "example": {
          "name": "Nike Wears",
          "link": "https://benrobo.co",
          "notes": "some notes",
          "type": "external"
        }
      },
      "UpdateProductWithImage": {
        "type": "object",
        "properties": {
          "image": {
            "type": "array"
          },
          "userId": {
            "type": "string"
          },
          "newData": {
            "$ref": "#/components/schemas/UpdateProductData"
          }
        }
      },
      "GetProduct": {
        "type": "object",
        "properties": {}
      },
      "ordersCount": {
        "type": "number"
      },
      "CreateCategory": {
        "type": "object",
        "properties": {
          "parent_id": {
            "type": ["integer", "null", "undefined", ""]
          },
          "name": {
            "type": "string"
          }
        },
        "required": ["name"]
      },
      "ProductCategory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "user": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ProductSubCategory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "parentCategory": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CategoryResponse": {
        "type": "object",
        "properties": {
          "parentCategory": {
            "$ref": "#/components/schemas/ProductCategory"
          },
          "subCategory": {
            "$ref": "#/components/schemas/ProductSubCategory"
          },
          "name": {
            "$ref": "#/components/schemas/CreateCategory/properties/name"
          }
        }
      },
      "SalesReport": {
        "type": "object",
        "properties": {
          "timeframe": {
            "type": "string"
          },
          "sum": {
            "type": "string"
          }
        },
        "required": ["timeframe", "sum"]
      },
      "getOrderData": {
        "type": "object",
        "properties": {
          "order_id": {
            "type": "string"
          },
          "order_price": {
            "type": "number",
            "format": "float"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "merchant": {
            "type": "object",
            "properties": {
              "status": {
                "type": "string"
              }
            }
          },
          "customer": {
            "type": "object",
            "properties": {
              "username": {
                "type": "string"
              }
            }
          },
          "product": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              }
            }
          }
        },
        "required": ["order_id", "createdAt", "merchant", "customer", "product"]
      },
      "AverageOrderValue": {
        "type": "object",
        "properties": {
          "averageOrderValue": {
            "type": "number",
            "format": "double",
            "description": "The average order value for today || yesterday."
          }
        },
        "example": {
          "averageOrderValue": 50.45
        }
      },
      "searchOrder": {
        "type": "object",
        "properties": {
          "order_id": {
            "type": "string"
          },
          "order_price": {
            "type": "number",
            "format": "float"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "merchant": {
            "$ref": "#/components/schemas/MerchantData"
          }
        },
        "required": ["order_id", "order_price", "createdAt", "merchant"]
      },
      "MerchantData": {
        "type": "object",
        "properties": {
          "revenue": {
            "$ref": "#/components/schemas/RevenueData",
            "customer_orders": {
              "$ref": "#/components/schemas/CustomerOrders",
              "type": "object",
              "properties": {
                "status": {
                  "type": "string"
                }
              }
            },
            "customer": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string"
                }
              }
            },
            "product": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                }
              }
            }
          }
        },
        "required": ["order_id", "createdAt", "merchant", "customer", "product"]
      },
      "RevenueData": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number"
          }
        }
      },
      "CustomerOrders": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "sales_report": {
            "$ref": "#/components/schemas/SalesData"
          }
        }
      },
      "SalesData": {
        "type": "object",
        "properties": {
          "sales": {
            "type": "number"
          }
        }
      },
      "CustomerData": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          }
        }
      },
      "ProductData": {
        "type": "object",
        "properties": {
          "price": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "categories": {
            "$ref": "#/components/schemas/CategoriesData"
          }
        }
      },
      "CategoriesData": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "Subcategory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "parentCategoryId": {
            "type": "integer"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ProductCategoryWithSubcategory": {
        "type": "object",
        "properties": {
          "subCategory": {
            "$ref": "#/components/schemas/Subcategory"
          },
          "productCategory": {
            "$ref": "#/components/schemas/ProductCategory"
          }
        }
      },
      "ProductWithCategories": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductCategoryWithSubcategory"
            }
          }
        }
      },
      "UpdateDiscount": {
        "type": "object",
        "properties": {
          "discount_type": {
            "type": "string",
            "required": false
          },
          "amount": {
            "type": "number",
            "required": false
          },
          "code": {
            "type": "string",
            "required": false
          },
          "quantity": {
            "type": "number",
            "required": false
          },
          "maximum_discount_price": {
            "type": "number",
            "required": false
          },
          "product_ids": {
            "type": "number",
            "required": false
          },
          "valid_from": {
            "type": "object",
            "format": "date-time",
            "required": false
          },
          "valid_to": {
            "type": "object",
            "format": "date-time",
            "required": false
          }
        },
        "example": [
          {
            "id": 1,
            "user_id": "merchant-uuid",
            "promotion_type": "Discount",
            "code": "YESSIR123",
            "discount_type": "Percentage",
            "quantity": 23,
            "amount": 22.22,
            "maximum_discount_price": 200,
            "valid_from": "2023-10-23T00:00:00.000Z",
            "valid_to": "2023-10-31T00:00:00.000Z",
            "createdAt": "2023-10-11T00:00:00.000Z",
            "updatedAt": "2023-10-11T00:00:00.000Z"
          }
        ]
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
