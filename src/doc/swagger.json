{
  "openapi": "3.0.0",
  "info": {
    "title": "Zuriportfolio Shop API",
    "description": "Zuriportfolio shop internal / external api.",
    "version": "0.1.9"
  },
  "servers": [
    {
      "url": "http://localhost:8080/api",
      "description": "Zuriportfolio shop internal / external api."
    },
    {
      "url": "https://zuriportfolio-shop-internal-api.onrender.com/api",
      "description": "Production server"
    },
    {
      "url": "https://auth.akuya.tech/api",
      "description": "Authentication server"
    }
  ],

  "paths": {
    "/products": {
      "get": {
        "tags": ["Product"],
        "summary": "Fetch all products",
        "description": "",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetProduct"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/products/marketplace": {
      "get": {
        "tags": ["Product"],
        "summary": "Fetch all marketplace products",
        "description": "",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetProduct"
                }
              }
            }
          }
        }
      }
    },
    "/product/add": {
      "post": {
        "tags": ["Product"],
        "summary": "Create a new Product",
        "description": "",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/AddProduct"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddProduct"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/product/{product_id}": {
      "delete": {
        "tags": ["Product"],
        "summary": "Delete a product",
        "description": "Delete a specific product.",
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "description": "Product id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Action authorized successfully."
          },
          "400": {
            "description": "Bad request. Please check the request parameters."
          },
          "401": {
            "description": "Unauthorized. Token is invalid or action is not permitted."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/order/status/{order_id}": {
      "patch": {
        "tags": ["Order"],
        "summary": "Update Order Status",
        "description": "Update the status of a specific order.",
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "description": "Order ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": ["pending", "complete", "failed"],
                    "example": "complete"
                  }
                },
                "required": ["status"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Order status updated successfully."
          },
          "400": {
            "description": "Bad request. Please check the request parameters or status value."
          },
          "401": {
            "description": "Unauthorized. Token is invalid or action is not permitted."
          },
          "404": {
            "description": "Order not found."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/orders/average": {
      "get": {
        "tags": ["Orders"],
        "summary": "Fetch the average order value for today",
        "parameters": [
          {
            "name": "timeframe",
            "in": "query",
            "description": "Timeframe for calculating the average order value. Should be 'today'.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["today"],
              "example": "today"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AverageOrderValue"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Please check the request parameters."
          },
          "401": {
            "description": "Unauthorized. Token is invalid or action is not permitted."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/orders": {
      "get": {
        "tags": ["Order"],
        "summary": "Gets all order count withing a timeframe",
        "description": "Gets all order count withing a timeframe",
        "parameters": [
          {
            "name": "timeframe",
            "in": "query",
            "description": " values: today, yesterday,one-week-ago and two-weeks-ago ",
            "required": "true",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ordersCount"
                }
              }
            }
          }
        }
      }
    },
    "/product/category": {
      "post": {
        "tags": ["Product"],
        "summary": "Create a product category",
        "description": "Create a parent or subcategory.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCategory"
              },
              "example": {
                "name": "Software Enginering",
                "parent_id": null
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Category created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryResponse"
                },
                "example": {
                  "parentCategory": {
                    "$ref": "#/components/schemas/ProductCategory"
                  },
                  "subCategory": {
                    "$ref": "#/components/schemas/ProductSubCategory"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Please check the request parameters or status value."
          },
          "401": {
            "description": "Unauthorized. Token is invalid or action is not permitted."
          },
          "404": {
            "description": "Order not found."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/discount": {
      "post": {
        "summary": "Create a discount",
        "tags": ["Discount"],
        "requestBody": {
          "description": "Discount data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "discount_type": {
                    "type": "string",
                    "description": "Type of discount",
                    "required": true
                  },
                  "amount": {
                    "type": "number",
                    "description": "Discount amount",
                    "required": true
                  },
                  "quantity": {
                    "type": "number",
                    "description": "Minimum quantity for the discount",
                    "minimum": 1,
                    "required": true
                  },
                  "maximum_discount_price": {
                    "type": "number",
                    "description": "Maximum discount price",
                    "required": false
                  },
                  "product_ids": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": "Product ID with a custom UUID pattern",
                      "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
                      "example": "valid-uuid",
                      "required": true
                    },
                    "description": "Array of product IDs",
                    "required": true
                  },
                  "valid_from": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Start date and time of discount",
                    "required": true
                  },
                  "valid_to": {
                    "type": "string",
                    "format": "date-time",
                    "description": "End date and time of discount",
                    "required": true
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        },
        "responses": {
          "201": {
            "description": "Discount created successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/shop": {
      "post": {
        "summary": "Create a shop",
        "tags": ["Shop"],
        "requestBody": {
          "description": "Shop data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "shop name",
                    "required": true
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        },
        "responses": {
          "201": {
            "description": "Shop created successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/shop/store-traffic": {
      "post": {
        "summary": "Used to track user visit to a shop",
        "tags": ["Shop"],
        "requestBody": {
          "description": "Shop data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "shop_id": {
                    "type": "string",
                    "description": "The shop id of the shop visited",
                    "required": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Traffic added"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/product/categories": {
      "get": {
        "summary": "Retrieve Product Categories",
        "description": "Get a list of all product categories along with their subcategories.",
        "tags": ["Product"],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "example": [
                  {
                    "id": 11,
                    "name": "Electronics",
                    "product_id": "11",
                    "createdAt": "2023-10-11T21:25:23.0000Z",

                    "sub_categories": [
                      {
                        "id": 101,
                        "name": "Smartphones",
                        "parent_category_id": 1011,
                        "createdAt": "2023-10-11T21:25:23.0000Z"
                      }
                    ]
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/sales/reports": {
      "get": {
        "tags": ["Sales"],
        "summary": "Retrieve Sales Reports",
        "description": "Get sales reports based on timeframes.",
        "parameters": [
          {
            "name": "timeframe",
            "in": "query",
            "description": "Comma-separated list of timeframes (e.g., 12m,3m,1yr,7d,24hr)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SalesReport"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/Orders": {
      "get": {
        "tags": ["Orders"],
        "summary": "get all orders",
        "description": "",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getOrderData"
                },
                "example": [
                  {
                    "order_id": "1122",
                    "createdAt": "2023-10-11T18:00:52.000Z",
                    "merchant": {
                      "customer_orders": [
                        {
                          "status": "complete"
                        }
                      ]
                    },
                    "customer": [
                      {
                        "username": "Customer1"
                      }
                    ],
                    "product": {
                      "name": "Longchair"
                    }
                  }
                ]
              }
            }
          },
          "401": {
            "description": "Unauthorized. Please provide an authenticated user."
          },
          "403": {
            "description": "Forbidden. Token is invalid or action is not permitted for provided user."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/orders/average": {
      "get": {
        "tags": ["Orders"],
        "summary": "Fetch the average order value for today",
        "parameters": [
          {
            "name": "timeframe",
            "in": "query",
            "description": "Timeframe for calculating the average order value. Should be 'today'.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["today"],
              "example": "today"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AverageOrderValue"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Please check the request parameters."
          },
          "401": {
            "description": "Unauthorized. Token is invalid or action is not permitted."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "AddProduct": {
        "type": "object",
        "properties": {
          "image": {
            "type": "string",
            "format": "binary"
          },

          "userId": {
            "type": "string"
          },
          "shopId": {
            "type": "string"
          },
          "shopId": {
            "type": "string"
          },

          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "quantity": {
            "type": "integer"
          },
          "categoryId": {
            "type": "integer"
          },
          "price": {
            "type": "number"
          },
          "discountPrice": {
            "type": "number"
          },
          "tax": {
            "type": "number"
          },
          "currency": {
            "type": "string"
          }
        },

        "required": [
          "image",

          "userId",
          "shopId",

          "name",
          "description",
          "quantity",
          "categoryId",
          "price",
          "discountPrice",
          "tax",
          "currency"
        ],

        "example": {
          "categoryId": 1,
          "name": "HNGX polo",
          "description": "Red",
          "quantity": 4,
          "price": 500,
          "discount_price": 455,
          "tax": 2.2,
          "currency": "USD"
        }
      },

      "GetProduct": {
        "type": "object",
        "properties": {}
      },

      "ordersCount": {
        "type": "number"
      },

      "CreateCategory": {
        "type": "object",
        "properties": {
          "parent_id": {
            "type": ["integer", "null", "undefined", ""]
          },
          "name": {
            "type": "string"
          }
        },
        "required": ["name"]
      },
      "ProductCategory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "user": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ProductSubCategory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "parentCategory": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CategoryResponse": {
        "type": "object",
        "properties": {
          "parentCategory": {
            "$ref": "#/components/schemas/ProductCategory"
          },
          "subCategory": {
            "$ref": "#/components/schemas/ProductSubCategory"
          },
          "name": {
            "$ref": "#/components/schemas/CreateCategory/properties/name"
          }
        }
      },
      "SalesReport": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "sales": {
            "type": "integer"
          },
          "order_id": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": ["id", "user_id", "sales", "order_id", "createdAt"]
      },
      "getOrderData": {
        "type": "object",
        "properties": {
          "order_id": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "merchant": {
            "type": "object",
            "properties": {
              "status": {
                "type": "string"
              }
            }
          },
          "customer": {
            "type": "object",
            "properties": {
              "username": {
                "type": "string"
              }
            }
          },
          "product": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              }
            }
          }
        },
        "required": ["order_id", "createdAt", "merchant", "customer", "product"]
      },
      "AverageOrderValue": {
        "type": "object",
        "properties": {
          "averageSales": {
            "type": "number",
            "format": "double",
            "description": "The average order value for today."
          }
        },
        "example": {
          "averageSales": 50.45
        }
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
