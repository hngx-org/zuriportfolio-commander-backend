generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum STATUS {
    pending
    completed
    failed
}

enum ADMIN_STATUS {
    pending
    approved
    reviewed
    blacklisted
    suspended
}

enum Discount_type {
    Percentage
    Fixed
}

enum restricted {
    no
    temporary
    permanent
}

enum ACTIVITY_USER_TYPE {
    admin
    merchant
}

enum product_status {
    active
    temporary
}

enum shop_status {
    active
    temporary
}

enum ORDER_STATUS {
    pending
    completed
    cancelled
}

enum PRODUCT_ASSET_TYPE {
    internal
    external
}

model user {
    id                   String             @id @unique @default(uuid())
    username             String
    first_name           String
    last_name            String
    email                String
    section_order        String?
    password             String?
    provider             String?
    is_verified          Boolean            @default(false)
    two_factor_auth      Boolean            @default(false)
    location             String?
    country              String?
    profile_pic          String?
    refresh_token        String
    createdAt            DateTime           @default(now())
    order_items          order_item[]       @relation(name: "merchant_orders")
    customer_orders      order[]            @relation(name: "customer_orders")
    customer_order_items order_item[]       @relation(name: "customer_orders")
    revenue              revenue[]
    promotion            promotion[]
    track_promotion      track_promotion[]
    shop                 shop[]
    promo_product        promo_product[]
    activities           activity[]
    categories           product_category[]
    products             product[]
}

model order {
    id          String   @id @unique @default(uuid())
    customer_id String
    subtotal    Float?
    VAT         Float?
    discount    Float    @default(0)
    status      STATUS   @default(pending)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @default(now())

    customer     user           @relation(name: "customer_orders", fields: [customer_id], references: [id])
    sales_report sales_report[]
    order_items  order_item[]
}

model order_item {
    id             Int         @id @default(autoincrement())
    order_id       String
    product_id     String
    merchant_id    String
    customer_id    String
    order_price    Float
    order_VAT      Float
    order_discount Float
    status         ORDER_STATUS @default(pending)
    promo_id       Int?
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @default(now())

    merchant user       @relation(name: "merchant_orders", fields: [merchant_id], references: [id])
    customer user       @relation(name: "customer_orders", fields: [customer_id], references: [id])
    promo    promotion? @relation(fields: [promo_id], references: [id])
    product  product    @relation(fields: [product_id], references: [id], onDelete: Cascade)
    order    order      @relation(fields: [order_id], references: [id], onDelete: Cascade)
}

model product {
    id              String         @id @unique
    user_id         String
    shop_id         String
    category_id     Int
    sub_category_id Int
    name            String
    description     String
    quantity        Int            @default(1)
    price           Float
    discount_price  Float          @default(0)
    tax             Float
    admin_status    ADMIN_STATUS   @default(pending)
    is_published    Boolean        @default(false)
    is_deleted      product_status @default(active)
    currency        String
    createdAt       DateTime       @default(now())
    updatedAt       DateTime       @default(now())

    image           product_image[]
    track_promotion track_promotion[]
    promo_product   promo_product[]
    order_items     order_item[]

    user           user?                   @relation(fields: [user_id], references: [id], onDelete: Cascade)
    shop           shop                    @relation(fields: [shop_id], references: [id], onDelete: Cascade)
    digital_assets product_digital_assets?
    category       product_category        @relation(fields: [category_id], references: [id]) //! Remove this later on.
    sub_category   product_sub_category    @relation(fields: [sub_category_id], references: [id])
    //   rating
}

model product_digital_assets {
    id         String             @id @unique @default(uuid())
    name       String
    notes      String
    link       String
    type       PRODUCT_ASSET_TYPE @default(external)
    product_id String             @unique
    created_at DateTime           @default(now())
    updated_at DateTime           @default(now())

    product product @relation(fields: [product_id], references: [id], onDelete: Cascade)
}

model product_image {
    id         Int     @id @default(autoincrement())
    product_id String
    url        String
    product    product @relation(fields: [product_id], references: [id], onDelete: Cascade)
}

model product_category {
    id        Int      @id @default(autoincrement())
    name      String   @unique
    createdAt DateTime @default(now())
    user_id   String
    user      user     @relation(fields: [user_id], references: [id], onDelete: Cascade)

    product        product[] //! Remove this later on
    sub_categories product_sub_category[]
}

model product_sub_category {
    id                 Int      @id @default(autoincrement())
    name               String   @unique
    parent_category_id Int
    createdAt          DateTime @default(now())

    parent_category product_category @relation(fields: [parent_category_id], references: [id], onDelete: Cascade)
    products        product[]
}

model promo_product {
    id         Int    @id @default(autoincrement())
    promo_id   Int
    product_id String //  new field
    user_id    String
    // createdAt  DateTime @default(now())

    user    user      @relation(fields: [user_id], references: [id], onDelete: Cascade)
    product product   @relation(fields: [product_id], references: [id], onDelete: Cascade)
    promo   promotion @relation(fields: [promo_id], references: [id], onDelete: Cascade)
}

model promotion {
    id                     Int           @id @default(autoincrement())
    user_id                String
    promotion_type         String
    code                   String
    discount_type          Discount_type @default(Percentage)
    quantity               Int
    amount                 Float
    maximum_discount_price Float?
    valid_from             DateTime      @db.Timestamp()
    valid_to               DateTime      @db.Timestamp()
    createdAt              DateTime      @default(now())
    updatedAt              DateTime      @default(now())

    user          user              @relation(fields: [user_id], references: [id], onDelete: Cascade)
    tracked_promo track_promotion[]
    order_items   order_item[]
    promo_product promo_product[]
}

model revenue {
    id        Int      @id @unique @default(autoincrement())
    user_id   String
    // app_id    String
    amount    Float
    createdAt DateTime @default(now())

    user user @relation(fields: [user_id], references: [id])
}

model track_promotion {
    id         Int      @id @default(autoincrement())
    product_id String
    promo_id   Int
    user_id    String
    createdAt  DateTime @default(now())

    user      user      @relation(fields: [user_id], references: [id], onDelete: Cascade)
    product   product?  @relation(fields: [product_id], references: [id], onDelete: Cascade)
    promotion promotion @relation(fields: [promo_id], references: [id], onDelete: Cascade)
}

model shop {
    id                  String       @id @unique
    merchant_id         String
    name                String
    policy_confirmation Boolean?
    restricted          restricted   @default(no)
    admin_status        ADMIN_STATUS @default(pending)
    is_deleted          shop_status  @default(active)
    reviewed            Boolean?
    rating              Float?

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())

    merchant user      @relation(fields: [merchant_id], references: [id], onDelete: Cascade)
    products product[]
}

model store_traffic {
    id        Int      @id @default(autoincrement())
    shop_id   String
    ip_addr   String
    createdAt DateTime @default(now())
}

model sales_report {
    id        String   @id
    user_id   String
    sales     Int
    order_id  String
    createdAt DateTime @default(now())

    order order @relation(fields: [order_id], references: [id])
}

model activity {
    id          String   @id @default(uuid())
    action      String
    user_id     String
    title       String
    description String
    // user_type   ACTIVITY_USER_TYPE
    createdAt   DateTime @default(now())

    user user @relation(fields: [user_id], references: [id], onDelete: Cascade)
}
